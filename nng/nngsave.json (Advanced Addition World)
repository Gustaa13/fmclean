{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h, \r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw h, \r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ, \r\nrw add_zero, \r\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with n' ind,\r\nrw add_zero 0,\r\nrefl,\r\nrw add_succ 0 n',\r\nrw ind,\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c' ind,\r\nrw add_zero (a + b),\r\nrw add_zero b,\r\nrefl,\r\nrw add_succ (a + b),\r\nrw ind,\r\nrw add_succ b c',\r\nrw add_succ a (b + c'),\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with b' ind,\r\nrw add_zero (succ a),\r\nrw add_zero a,\r\nrefl,\r\nrw add_succ (succ a) b',\r\nrw ind,\r\nrw add_succ a b',\r\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with b' ind,\r\nrw add_zero a,\r\nrw zero_add a,\r\nrefl,\r\nrw add_succ a,\r\nrw succ_add b',\r\nrw ind,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ n,\r\nrw add_zero n,\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_assoc a b c,\r\nrw add_assoc a c b,\r\nrw add_comm b c,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with m' ind,\r\nrw mul_zero 0,\r\nrefl,\r\nrw mul_succ 0,\r\nrw ind,\r\nrw add_zero 0,\r\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ m,\r\nrw mul_zero m,\r\nrw zero_add m,\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with m' ind,\r\nrw mul_zero 1,\r\nrefl,\r\nrw mul_succ 1,\r\nrw ind,\r\nrw succ_eq_add_one m',\r\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction a with a' ind,\r\nrw zero_add b,\r\nrw mul_zero t,\r\nrw zero_add (t * b),\r\nrefl,\r\nrw succ_add a',\r\nrw mul_succ t,\r\nrw ind,\r\nrw mul_succ t,\r\nrw add_right_comm,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c' ind,\r\nrepeat {rw mul_zero},\r\nrw mul_succ b,\r\nrw mul_add a,\r\nrw mul_succ,\r\nrwa ind,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with b' ind,\r\nrepeat {rw mul_zero},\r\nrwa add_zero 0,\r\nrw mul_succ (succ a),\r\nrw ind,\r\nrw mul_succ a,\r\nrepeat {rw add_succ},\r\nrwa add_right_comm,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with t' ind,\r\nrepeat {rw mul_zero},\r\nrwa add_zero 0,\r\nrepeat {rw mul_succ},\r\nrw ind,\r\nsimp,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with b' ind,\r\nrw mul_zero a,\r\nrwa zero_mul a,\r\nrw mul_succ a,\r\nrw succ_mul b',\r\nrwa ind,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with c' ind,\r\nrepeat {rw mul_zero},\r\nrepeat {rw mul_succ},\r\nrepeat {rw mul_add},\r\nrepeat {rw mul_comm a},\r\nrwa mul_assoc b c',"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rwa pow_zero 0,\r\n"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ 0,\r\nrwa mul_zero,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ a,\r\nrw pow_zero a,\r\nrwa one_mul,\r\n"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with m' ind,\r\nrwa pow_zero 1,\r\nrw pow_succ 1,\r\nrw ind,\r\nrwa mul_one 1,\r\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction m with m' ind,\r\nrw zero_add n,\r\nrw pow_zero a,\r\nrwa one_mul,\r\nrw succ_add m',\r\nrw pow_succ a,\r\nrw ind,\r\nrw pow_succ a,\r\nsimp,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n' ind,\r\nrepeat {rw pow_zero},\r\nrwa mul_one 1,\r\nrw pow_succ,\r\nrw ind,\r\nrepeat {rw pow_succ},\r\nsimp,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with n' ind,\r\nrw pow_zero,\r\nrw mul_zero m,\r\nrwa pow_zero a,\r\nrw pow_succ,\r\nrw mul_succ m,\r\nrw ind,\r\nrwa pow_add a,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrepeat {rw pow_succ},\r\nrepeat {rw pow_one},\r\nrw mul_add (a + b),\r\nrepeat {rw add_mul},\r\nrw succ_mul 1,\r\nrw one_mul a,\r\nrw add_mul a a,\r\nsimp,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nexact 3 * a + 2,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\nhave q : Q := pq(p),\r\nhave qr : Q → R := pqr(p),\r\nhave r : R := qr(q),\r\nexact r,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qf p,\r\nhave q : Q := pq(p),\r\nhave f : F := qf(q),\r\nexact f,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qe p,\r\napply qe,\r\nhave q : Q := pq(p),\r\nexact q,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nhave b : B := f1(a),\r\nhave e : E := f2(b),\r\nhave f : F := f5(e),\r\nhave g : G := f8(f),\r\nhave j : J := f9(g),\r\nhave i : I := f11(j),\r\nhave l : L := f15(i),\r\nexact l,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h(p),\r\nhave t : T := j(q),\r\nhave u : U := l(t),\r\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pqr pq p,\r\nhave qr : Q → R := pqr(p),\r\nhave q : Q := pq(p),\r\nhave r : R := qr(q),\r\nexact r,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros pq qr p,\r\napply qr,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "rw not_iff_imp_false Q,\r\nrw not_iff_imp_false P,\r\nintros pq qf p,\r\nhave q : Q := pq(p),\r\nhave f : false := qf(q),\r\nexact f,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "cc,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro peq,\r\nsplit,\r\n{\r\n  cases peq with p q,\r\n  exact q,\r\n},\r\n{\r\n  cases peq with p q,\r\n  exact p,\r\n},"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros peq qer,\r\nsplit,\r\n{\r\n  cases peq with p q,\r\n  exact p,\r\n},\r\n{\r\n  cases qer with q r,\r\n  exact r,\r\n},"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros bpq bqr,\r\ncases bpq with pq qp,\r\ncases bqr with qr rq,\r\nsplit,\r\n{\r\n  intro p,\r\n  have q : Q := pq(p),\r\n  have r : R := qr(q),\r\n  exact r,\r\n},\r\n{\r\n  intro r,\r\n  apply qp,\r\n  apply rq,\r\n  exact r,\r\n},"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros bpq bqr,\r\ncases bpq with pq qp,\r\ncases bqr with qr rq,\r\nsplit,\r\n{\r\n  intro p,\r\n  have q : Q := pq(p),\r\n  have r : R := qr(q),\r\n  exact r,\r\n},\r\n{\r\n  intro r,\r\n  apply qp,\r\n  apply rq,\r\n  exact r,\r\n},"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro pouq,\r\ncases pouq with p q,\r\n{\r\n  right,\r\n  exact p,\r\n},\r\n{\r\n  left,\r\n  exact q,\r\n},"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\n{\r\n  intro p_e_qour,\r\n  cases p_e_qour with p qour,\r\n  cases qour with q r,\r\n  {\r\n    left,\r\n    split,\r\n    {\r\n      exact p,\r\n    },\r\n    {\r\n      exact q,\r\n    },\r\n  },\r\n  {\r\n    right,\r\n    split,\r\n    {\r\n      exact p,\r\n    },\r\n    {\r\n      exact r,\r\n    },\r\n  },\r\n},\r\n{\r\n  intro peq_ou_per,\r\n  split,\r\n  {\r\n    cases peq_ou_per with peq per,\r\n    {\r\n      cases peq with p q,\r\n      exact p,\r\n    },\r\n    {\r\n      cases per with p r,\r\n      exact p,\r\n    },\r\n  },\r\n  {\r\n    cases peq_ou_per with peq per,\r\n    {\r\n      cases peq with p q,\r\n      left,\r\n      exact q,\r\n    },\r\n    {\r\n      cases per with p r,\r\n      right,\r\n      exact r,\r\n    },\r\n  },\r\n},"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "rw not_iff_imp_false,\r\nintro pepf,\r\nexfalso,\r\ncases pepf with p pf,\r\nhave f : false := pf(p),\r\nexact f,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q : Q,\r\n{\r\n  intros qfpf p,\r\n  exact q,\r\n},\r\n{\r\n  intros qfpf p,\r\n  have pf : ¬P := qfpf(q),\r\n  rw not_iff_imp_false at pf,\r\n  have f : false := pf(p),\r\n  exfalso,\r\n  exact f,\r\n},\r\n{\r\n  intros qfpf p,\r\n  exact q,\r\n},\r\n{\r\n  intros qfpf pt,\r\n  rw not_iff_imp_false at p,\r\n  have f : false := p(pt),\r\n  exfalso,\r\n  exact f,\r\n},"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "have ab : a = b := succ_inj(hs),\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "have sasb : succ a = succ b := succ_inj(h),\r\nhave ab : a = b := succ_inj(sasb),\r\nexact ab,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro ab,\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact succ_inj,\r\nexact succ_eq_succ_of_eq,\r\n"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro atb,\r\ninduction t with t' ind,\r\n{\r\n  repeat {rw add_zero at atb},\r\n  rwa atb,\r\n},\r\n{\r\n  repeat {rw add_succ at atb},\r\n  have at'b : a + t' = b + t' := succ_inj(atb),\r\n  have ab : a = b := ind(at'b),\r\n  exact ab,\r\n},"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm t a,\r\nrw add_comm t b,\r\nexact add_right_cancel a t b,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n{\r\n  exact add_right_cancel a t b,\r\n},\r\n{\r\n  intro ab,\r\n  rwa ab,\r\n},"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro aba,\r\ninduction a with a' ind,\r\n{\r\n  rw zero_add at aba,\r\n  exact aba,\r\n},\r\n{\r\n  rw succ_add a' b at aba,\r\n  have a'ba' : a' + b = a' := succ_inj(aba),\r\n  have b0 : b = 0 := ind(a'ba'),\r\n  exact b0,\r\n},"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with d,\r\n{\r\n  refl,\r\n},\r\n{\r\n  rw add_succ at H,\r\n  have dif0 : succ (a + d) ≠ 0 := succ_ne_zero(a + d),\r\n  have f : false := dif0(H),\r\n  exfalso,\r\n  exact f,\r\n},"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "rw add_comm a b,\r\nintro ba0,\r\nexact add_left_eq_zero ba0,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nrwa succ_eq_add_one d,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with n' ind,\r\n{\r\n  exact zero_ne_succ 0,\r\n},\r\n{\r\n  intro sn'ssn',\r\n  have n'sn' : n' = succ n' := succ_inj(sn'ssn'),\r\n  have f : false := ind(n'sn'),\r\n  exact f,\r\n},"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "editorText": "sorry"
    }
  ]
}
